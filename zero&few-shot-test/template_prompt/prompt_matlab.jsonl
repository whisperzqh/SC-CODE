{"path": "GitHub-Crawler-Matlab/sparse-plex-master/library/+spx/+cluster/+ssc/SSC_NN_OMP.m", "language": "matlab", "code": "function recover_coefficients(self)\n\ndata = self.Data;\n\nself.NormalizedData = spx.norm.normalize_l2(data);\n\n\nns = self.S;\n\n\nall_cols = 1:ns;\n\nfor s=all_cols\n\nif ~self.Quiet \n\nfprintf('.');\n\nif mod(s, 50) == 0\n\nfprintf('\\n');\n\nend\n\nend\n\nself.nn_omp(s);\n\nend\n\nif ~self.Quiet \n\nfprintf('\\n');\n\nend\n\nend\n", "code_tokens": ["function", "Ġrecover", "_", "co", "efficients", "(", "self", ")", "Ġdata", "Ġ=", "Ġself", ".", "Data", ";", "Ġself", ".", "Normal", "ized", "Data", "Ġ=", "Ġsp", "x", ".", "norm", ".", "normal", "ize", "_", "l", "2", "(", "data", ");", "Ġns", "Ġ=", "Ġself", ".", "S", ";", "Ġall", "_", "col", "s", "Ġ=", "Ġ1", ":", "ns", ";", "Ġfor", "Ġs", "=", "all", "_", "col", "s", "Ġif", "Ġ~", "self", ".", "Qu", "iet", "Ġf", "printf", "('", ".'", ");", "Ġif", "Ġmod", "(", "s", ",", "Ġ50", ")", "Ġ==", "Ġ0", "Ġf", "printf", "('", "\\", "n", "');", "Ġend", "Ġend", "Ġself", ".", "nn", "_", "omp", "(", "s", ");", "Ġend", "Ġif", "Ġ~", "self", ".", "Qu", "iet", "Ġf", "printf", "('", "\\", "n", "');", "Ġend", "Ġend"], "docstring": "Computes sparse representations of the data vectors", "docstring_tokens": ["Comp", "utes", "Ġsparse", "Ġrepresentations", "Ġof", "Ġthe", "Ġdata", "Ġvectors"], "partition": "valid"}
{"path": "GitHub-Crawler-Matlab/mexopencv-master/samples/falsecolor_demo_gui.m", "language": "matlab", "code": "function varargout = falsecolor_demo_gui(im)\n\nif nargin < 1\n\n\nif ~mexopencv.isOctave()\n\nS = load(which('penny.mat'));\n\nimg = cv.resize(uint8(S.P), 4, 4);\n\nelseif true\n\nimg = cv.normalize(peaks(500), ...\n\n'Alpha',0, 'Beta',255, 'NormType','MinMax', 'DType','uint8');\n\nelse\n\nim = fullfile(mexopencv.root(), 'test', 'HappyFish.jpg');\n\nimg = cv.imread(im, 'Grayscale',true);\n\nend\n\n\nimg = createRandomImage();\n\nelseif ischar(im)\n\nimg = cv.imread(im, 'Grayscale',true);\n\nelse\n\nimg = im;\n\nend\n\n\nh = buildGUI(img);\n\nif nargout > 0, varargout{1} = h; end\n\nend\n", "code_tokens": ["function", "Ġvar", "arg", "out", "Ġ=", "Ġfal", "sec", "olor", "_", "dem", "o", "_", "gui", "(", "im", ")", "Ġif", "nargin", "<", "Ġ1", "Ġif", "Ġ~", "m", "ex", "open", "cv", ".", "is", "Oct", "ave", "()", "ĠS", "Ġ=", "Ġload", "(", "which", "('", "p", "enny", ".", "mat", "')", ");", "Ġimg", "Ġ=", "Ġc", "v", ".", "res", "ize", "(", "uint", "8", "(", "S", ".", "P", "),", "Ġ4", ",", "Ġ4", ");", "elseif", "true", "Ġimg", "Ġ=", "Ġc", "v", ".", "normal", "ize", "(", "pe", "aks", "(", "500", "),", "Ġ...", "Ġ'", "Alpha", "',", "0", ",", "Ġ'", "Beta", "',", "255", ",", "Ġ'", "Norm", "Type", "','", "Min", "Max", "',", "Ġ'", "D", "Type", "','", "uint", "8", "');", "Ġelse", "Ġim", "Ġ=", "Ġfull", "file", "(", "m", "ex", "open", "cv", ".", "root", "(),", "Ġ'", "test", "',", "Ġ'", "Happy", "Fish", ".", "jpg", "');", "Ġimg", "Ġ=", "Ġc", "v", ".", "im", "read", "(", "im", ",", "Ġ'", "Gr", "ays", "cale", "',", "true", ");", "Ġend", "Ġimg", "Ġ=", "Ġcreate", "Random", "Image", "();", "elseif", "is", "char", "(", "im", ")", "Ġimg", "Ġ=", "Ġc", "v", ".", "im", "read", "(", "im", ",", "Ġ'", "Gr", "ays", "cale", "',", "true", ");", "Ġelse", "Ġimg", "Ġ=", "Ġim", ";", "Ġend", "Ġh", "Ġ=", "Ġbuild", "GUI", "(", "img", ");", "Ġif", "nargout", ">", "Ġ0", ",", "Ġvar", "arg", "out", "{", "1", "}", "Ġ=", "Ġh", ";", "Ġend", "Ġend"], "docstring": "load source image", "docstring_tokens": ["load", "Ġsource", "Ġimage"], "partition": "valid"}
{"path": "GitHub-Crawler-Matlab/brainstorm3-master/toolbox/gui/figure_connect.m", "language": "matlab", "code": "function FigureMouseMoveCallback(hFig, ev)\n\nclickAction = getappdata(hFig, 'clickAction');   \n\nclickSource = getappdata(hFig, 'clickSource');\n\n\nif isempty(clickAction) || isempty(clickSource) || (clickSource ~= hFig)\n\nreturn\n\nend\n\n\nif strcmpi(clickAction, 'MouseDownNotConsumed') || isempty(getappdata(hFig, 'clickPositionFigure'))\n\nreturn\n\nend   \n\ncurPos = get(hFig, 'CurrentPoint');    \n\n\nmotionFigure = 0.3 * (curPos - getappdata(hFig, 'clickPositionFigure'));\n\n\nsetappdata(hFig, 'clickPositionFigure', curPos);\n\n\nsetappdata(hFig, 'hasMoved', 1);\n\n\nswitch(clickAction)              \n\ncase 'colorbar'\n\n\nColormapInfo = getappdata(hFig, 'Colormap');\n\n\nsColormap = bst_colormaps('ColormapChangeModifiers', ColormapInfo.Type, [motionFigure(1), motionFigure(2)] ./ 100, 0);\n\nset(hFig, 'Colormap', sColormap.CMap);\n\ncase 'ShiftClick'\n\n\nisShift = getappdata(hFig, 'ShiftPressed');\n\nif (~isempty(isShift) && isShift)\n\nmotion = -motionFigure * 0.05;\n\nMoveCamera(hFig, [motion(1) motion(2) 0]);\n\nend\n\ncase 'pan'\n\nmotion = -motionFigure * 0.05;\n\nMoveCamera(hFig, [motion(1) motion(2) 0]);\n\nend\n\nend\n", "code_tokens": ["function", "ĠFigure", "Mouse", "Move", "Callback", "(", "h", "Fig", ",", "Ġev", ")", "Ġclick", "Action", "Ġ=", "Ġget", "app", "data", "(", "h", "Fig", ",", "Ġ'", "click", "Action", "');", "Ġclick", "Source", "Ġ=", "Ġget", "app", "data", "(", "h", "Fig", ",", "Ġ'", "click", "Source", "');", "Ġif", "Ġis", "empty", "(", "click", "Action", ")", "Ġ||", "Ġis", "empty", "(", "click", "Source", ")", "Ġ||", "Ġ(", "click", "Source", "Ġ~", "=", "Ġh", "Fig", ")", "Ġreturn", "Ġend", "Ġif", "Ġstr", "cmp", "i", "(", "click", "Action", ",", "Ġ'", "Mouse", "Down", "Not", "Cons", "umed", "')", "Ġ||", "Ġis", "empty", "(", "get", "app", "data", "(", "h", "Fig", ",", "Ġ'", "click", "Position", "Figure", "'", "))", "Ġreturn", "Ġend", "Ġcur", "Pos", "Ġ=", "Ġget", "(", "h", "Fig", ",", "Ġ'", "Current", "Point", "');", "Ġmotion", "Figure", "Ġ=", "Ġ0", ".", "3", "Ġ*", "Ġ(", "cur", "Pos", "Ġ-", "Ġget", "app", "data", "(", "h", "Fig", ",", "Ġ'", "click", "Position", "Figure", "')", ");", "Ġset", "app", "data", "(", "h", "Fig", ",", "Ġ'", "click", "Position", "Figure", "',", "Ġcur", "Pos", ");", "Ġset", "app", "data", "(", "h", "Fig", ",", "Ġ'", "has", "M", "oved", "',", "Ġ1", ");", "Ġswitch", "(", "click", "Action", ")", "Ġcase", "Ġ'", "color", "bar", "'", "ĠCol", "orm", "ap", "Info", "Ġ=", "Ġget", "app", "data", "(", "h", "Fig", ",", "Ġ'", "Col", "orm", "ap", "');", "Ġs", "Col", "orm", "ap", "Ġ=", "Ġb", "st", "_", "col", "orm", "aps", "('", "Col", "orm", "ap", "Change", "Mod", "ifiers", "',", "ĠCol", "orm", "ap", "Info", ".", "Type", ",", "Ġ[", "motion", "Figure", "(", "1", "),", "Ġmotion", "Figure", "(", "2", ")]", "Ġ./", "Ġ100", ",", "Ġ0", ");", "Ġset", "(", "h", "Fig", ",", "Ġ'", "Col", "orm", "ap", "',", "Ġs", "Col", "orm", "ap", ".", "C", "Map", ");", "Ġcase", "Ġ'", "Shift", "Click", "'", "Ġis", "Shift", "Ġ=", "Ġget", "app", "data", "(", "h", "Fig", ",", "Ġ'", "Shift", "P", "ressed", "');", "Ġif", "Ġ(~", "is", "empty", "(", "is", "Shift", ")", "Ġ&&", "Ġis", "Shift", ")", "Ġmotion", "Ġ=", "Ġ-", "motion", "Figure", "Ġ*", "Ġ0", ".", "05", ";", "ĠMove", "Camera", "(", "h", "Fig", ",", "Ġ[", "motion", "(", "1", ")", "Ġmotion", "(", "2", ")", "Ġ0", "]);", "Ġend", "Ġcase", "Ġ'", "pan", "'", "Ġmotion", "Ġ=", "Ġ-", "motion", "Figure", "Ġ*", "Ġ0", ".", "05", ";", "ĠMove", "Camera", "(", "h", "Fig", ",", "Ġ[", "motion", "(", "1", ")", "Ġmotion", "(", "2", ")", "Ġ0", "]);", "Ġend", "Ġend"], "docstring": "Get current mouse action", "docstring_tokens": ["Get", "Ġcurrent", "Ġmouse", "Ġaction"], "partition": "valid"}
{"path": "GitHub-Crawler-Matlab/CERR-master/CERR_core/ModelImplementationLibrary/DosimetricModels/appeltCorrectedLogitFn.m", "language": "matlab", "code": "function [coeff,par] = getParCoeff(paramS,fieldName,doseBinsV,volHistV)\n\ngenFieldC = fields(paramS);\n\nfor i = 1:numel(genFieldC)\n\nif strcmpi(genFieldC{i},'structures')\n\nif isstruct(paramS.(genFieldC{i}))\n\nstructS = paramS.(genFieldC{i});\n\nstructListC = fieldnames(structS);\n\nfor j = 1:length(structListC)\n\nstrParamS = structS.(structListC{j});\n\nstrParamListC = fieldnames(strParamS);\n\nfor k = 1 : numel(strParamListC)\n\nif isfield(strParamS.(strParamListC{k}),'cteg') |  isfield(strParamS.(strParamListC{k}),'weight')\n\nparName = [structListC{j},strParamListC{k}];\n\nkeepParS.(parName) = strParamS.(strParamListC{k});\n\nend\n\nend\n\nend\n\nend\n\nelse\n\nif isfield(paramS.(genFieldC{i}),'cteg') |  isfield(paramS.(genFieldC{i}),'weight')\n\nparName = genFieldC{i};\n\nkeepParS.(parName) = paramS.(genFieldC{i});\n\nend\n\nend\n\nend\n\n\nkeepParC = fieldnames(keepParS);\n\npar = zeros(1,length(keepParC));\n\ncoeff = zeros(1,length(keepParC));\n\nfor n = 1:length(keepParC)\n\ncoeff(n) = keepParS.(keepParC{n}).(fieldName);\n\nif isnumeric(keepParS.(keepParC{n}).val)\n\npar(n) = keepParS.(keepParC{n}).val;\n\nelse\n\nif ~isfield(keepParS.(keepParC{n}),'params')\n\npar(n) = eval([keepParS.(keepParC{n}).val,...\n\n'(doseBinsV, volHistV)']);\n\nelse\n\n\nkeepParS.(keepParC{n}).params.numFractions.val = paramS.numFractions;\n\nif isfield(paramS,'abRatio')\n\nkeepParS.(keepParC{n}).params.abRatio.val = paramS.abRatio;\n\nend\n\npar(n) = eval([keepParS.(keepParC{n}).val,...\n\n'(doseBinsV, volHistV,keepParS.(keepParC{n}).params)']);\n\nend\n\nend\n\nend\n\nend\n", "code_tokens": ["function", "Ġ[", "co", "eff", ",", "par", "]", "Ġ=", "Ġget", "Par", "C", "oe", "ff", "(", "param", "S", ",", "field", "Name", ",", "dose", "B", "ins", "V", ",", "vol", "Hist", "V", ")", "Ġgen", "Field", "C", "Ġ=", "Ġfields", "(", "param", "S", ");", "Ġfor", "Ġi", "Ġ=", "Ġ1", ":", "num", "el", "(", "gen", "Field", "C", ")", "Ġif", "Ġstr", "cmp", "i", "(", "gen", "Field", "C", "{", "i", "}", ",'", "struct", "ures", "')", "Ġif", "Ġis", "struct", "(", "param", "S", ".(", "gen", "Field", "C", "{", "i", "}", "))", "Ġstruct", "S", "Ġ=", "Ġparam", "S", ".(", "gen", "Field", "C", "{", "i", "});", "Ġstruct", "List", "C", "Ġ=", "Ġfield", "names", "(", "struct", "S", ");", "Ġfor", "Ġj", "Ġ=", "Ġ1", ":", "length", "(", "struct", "List", "C", ")", "Ġstr", "Param", "S", "Ġ=", "Ġstruct", "S", ".(", "struct", "List", "C", "{", "j", "});", "Ġstr", "Param", "List", "C", "Ġ=", "Ġfield", "names", "(", "str", "Param", "S", ");", "Ġfor", "Ġk", "Ġ=", "Ġ1", "Ġ:", "Ġnum", "el", "(", "str", "Param", "List", "C", ")", "Ġif", "Ġis", "field", "(", "str", "Param", "S", ".(", "str", "Param", "List", "C", "{", "k", "}", "),", "'", "ct", "eg", "')", "Ġ|", "Ġis", "field", "(", "str", "Param", "S", ".(", "str", "Param", "List", "C", "{", "k", "}", "),", "'", "weight", "')", "Ġpar", "Name", "Ġ=", "Ġ[", "struct", "List", "C", "{", "j", "},", "str", "Param", "List", "C", "{", "k", "}", "];", "Ġkeep", "Par", "S", ".(", "par", "Name", ")", "Ġ=", "Ġstr", "Param", "S", ".(", "str", "Param", "List", "C", "{", "k", "});", "Ġend", "Ġend", "Ġend", "Ġend", "Ġelse", "Ġif", "Ġis", "field", "(", "param", "S", ".(", "gen", "Field", "C", "{", "i", "}", "),", "'", "ct", "eg", "')", "Ġ|", "Ġis", "field", "(", "param", "S", ".(", "gen", "Field", "C", "{", "i", "}", "),", "'", "weight", "')", "Ġpar", "Name", "Ġ=", "Ġgen", "Field", "C", "{", "i", "};", "Ġkeep", "Par", "S", ".(", "par", "Name", ")", "Ġ=", "Ġparam", "S", ".(", "gen", "Field", "C", "{", "i", "});", "Ġend", "Ġend", "Ġend", "Ġkeep", "Par", "C", "Ġ=", "Ġfield", "names", "(", "keep", "Par", "S", ");", "Ġpar", "Ġ=", "Ġz", "eros", "(", "1", ",", "length", "(", "keep", "Par", "C", "));", "Ġco", "eff", "Ġ=", "Ġz", "eros", "(", "1", ",", "length", "(", "keep", "Par", "C", "));", "Ġfor", "Ġn", "Ġ=", "Ġ1", ":", "length", "(", "keep", "Par", "C", ")", "Ġco", "eff", "(", "n", ")", "Ġ=", "Ġkeep", "Par", "S", ".(", "keep", "Par", "C", "{", "n", "}", ").", "(", "field", "Name", ");", "Ġif", "Ġisn", "umeric", "(", "keep", "Par", "S", ".(", "keep", "Par", "C", "{", "n", "}", ").", "val", ")", "Ġpar", "(", "n", ")", "Ġ=", "Ġkeep", "Par", "S", ".(", "keep", "Par", "C", "{", "n", "}", ").", "val", ";", "Ġelse", "Ġif", "Ġ~", "is", "field", "(", "keep", "Par", "S", ".(", "keep", "Par", "C", "{", "n", "}", "),", "'", "params", "')", "Ġpar", "(", "n", ")", "Ġ=", "Ġeval", "([", "keep", "Par", "S", ".(", "keep", "Par", "C", "{", "n", "}", ").", "val", ",...", "Ġ'(", "dose", "B", "ins", "V", ",", "Ġvol", "Hist", "V", ")", "']", ");", "Ġelse", "Ġkeep", "Par", "S", ".(", "keep", "Par", "C", "{", "n", "}", ").", "params", ".", "num", "F", "ractions", ".", "val", "Ġ=", "Ġparam", "S", ".", "num", "F", "ractions", ";", "Ġif", "Ġis", "field", "(", "param", "S", ",'", "ab", "Rat", "io", "')", "Ġkeep", "Par", "S", ".(", "keep", "Par", "C", "{", "n", "}", ").", "params", ".", "ab", "Rat", "io", ".", "val", "Ġ=", "Ġparam", "S", ".", "ab", "Rat", "io", ";", "Ġend", "Ġpar", "(", "n", ")", "Ġ=", "Ġeval", "([", "keep", "Par", "S", ".(", "keep", "Par", "C", "{", "n", "}", ").", "val", ",...", "Ġ'(", "dose", "B", "ins", "V", ",", "Ġvol", "Hist", "V", ",", "keep", "Par", "S", ".(", "keep", "Par", "C", "{", "n", "}", ").", "params", ")", "']", ");", "Ġend", "Ġend", "Ġend", "Ġend"], "docstring": "Extract relevant parameters", "docstring_tokens": ["Ext", "ract", "Ġrelevant", "Ġparameters"], "partition": "valid"}
{"path": "GitHub-Crawler-Matlab/pulmonarytoolkit-master/External/dicomat/DMUtilities.m", "language": "matlab", "code": "function metadata = ReadEssentialMetadata(fileName, reporting)\n\ntry\n\nmetadata = DMFallbackDicomLibrary.getLibrary.dicominfo(fileName);\n\ncatch exception\n\nreporting.Error('DMUtilities:MetaDataReadFail', ['Could not read metadata from the Dicom file ' file_name '. Error:' exception.message]);\n\nend\n", "code_tokens": ["function", "Ġmetadata", "Ġ=", "ĠRead", "Ess", "ential", "Met", "adata", "(", "file", "Name", ",", "Ġreporting", ")", "Ġtry", "Ġmetadata", "Ġ=", "ĠDM", "Fall", "back", "D", "ic", "om", "Library", ".", "get", "Library", ".", "d", "ic", "omin", "fo", "(", "file", "Name", ");", "Ġcatch", "Ġexception", "Ġreporting", ".", "Error", "('", "DM", "Ut", "ilities", ":", "Meta", "Data", "Read", "Fail", "',", "Ġ['", "Could", "Ġnot", "Ġread", "Ġmetadata", "Ġfrom", "Ġthe", "ĠD", "ic", "om", "Ġfile", "Ġ'", "Ġfile", "_", "name", "Ġ'.", "ĠError", ":'", "Ġexception", ".", "message", "]);", "Ġend"], "docstring": "Reads in Dicom metadata from the specified file", "docstring_tokens": ["Read", "s", "Ġin", "ĠD", "ic", "om", "Ġmetadata", "Ġfrom", "Ġthe", "Ġspecified", "Ġfile"], "partition": "valid"}
{"path": "GitHub-Crawler-Matlab/rbpf-gmapping-master/rvctools/robot/@CodeGenerator/genccodefkine.m", "language": "matlab", "code": "function [] = genccodefkine(CGen)\n\nsymname = 'fkine';\n\nfname = fullfile(CGen.sympath,[symname,'.mat']);\n\nif exist(fname,'file')\n\ntmpStruct = load(fname);\n\nelse\n\nerror ('genmfunfkine:SymbolicsNotFound','Save symbolic expressions to disk first!')\n\nend\n\n\nCGen.logmsg([datestr(now),'\\tGenerating forward kinematics c-code up to the end-effector frame: ']);\n\n\n\nsrcDir = fullfile(CGen.ccodepath,'src');\n\nhdrDir = fullfile(CGen.ccodepath,'include');\n\nif ~exist(srcDir,'dir')\n\nmkdir(srcDir);\n\nend\n\nif ~exist(hdrDir,'dir')\n\nmkdir(hdrDir);\n\nend\n\nfunname = [CGen.getrobfname,'_',symname];\n\nfunfilename = [funname,'.c'];\n\nhfilename = [funname,'.h'];\n\nQ = CGen.rob.gencoords;\n\n\n[funstr hstring] = ccodefunctionstring(tmpStruct.(symname),...\n\n'funname',funname,...\n\n'vars',{Q},'output','T');\n\n\n\nhStruct.calls = hstring;\n\nhFString = CGen.constructheaderstringc(hStruct);\n\n\nfid = fopen(fullfile(srcDir,funfilename),'w+');\n\n\n\n['#include \"', hfilename,'\"']);\n\n\n\nfclose(fid);\n\n\nfid = fopen(fullfile(hdrDir,hfilename),'w+');\n\n\n\n\n\n['#ifndef ', upper([funname,'_h'])],...\n\n['#define ', upper([funname,'_h'])]);\n\n\n\n'#include \"math.h\"');\n\n\n\n\n\n['#endif /*', upper([funname,'_h */'])]);\n\nfclose(fid);\n\n\n\nCGen.logmsg([datestr(now),'\\tGenerating forward kinematics m-function up to joint: ']);\n\nfor iJoints=1:CGen.rob.n\n\n\n\nsymname = ['T0_',num2str(iJoints)];\n\nfname = fullfile(CGen.sympath,[symname,'.mat']);\n\ntmpStruct = struct;\n\ntmpStruct = load(fname);\n\nfunname = [CGen.getrobfname,'_',symname];\n\nfunfilename = [funname,'.c'];\n\nhfilename = [funname,'.h'];\n\nQ = CGen.rob.gencoords;\n\n\n[funstr hstring] = ccodefunctionstring(tmpStruct.(symname),...\n\n'funname',funname,...\n\n'vars',{Q},'output','T');\n\n\n\nhStruct.calls = hstring;\n\nhFString = CGen.constructheaderstringc(hStruct);\n\n\nfid = fopen(fullfile(srcDir,funfilename),'w+');\n\n\n\n['#include \"', hfilename,'\"']);\n\n\n\nfclose(fid);\n\n\nfid = fopen(fullfile(hdrDir,hfilename),'w+');\n\n\n\n\n\n['#ifndef ', upper([funname,'_h'])],...\n\n['#define ', upper([funname,'_h'])]);\n\n\n\n'#include \"math.h\"');\n\n\n\n\n\n['#endif /*', upper([funname,'_h */'])]);\n\nfclose(fid);\n\nend\n\n\nend\n", "code_tokens": ["function", "Ġ[]", "Ġ=", "Ġgen", "cc", "od", "ef", "k", "ine", "(", "C", "Gen", ")", "Ġsym", "name", "Ġ=", "Ġ'", "f", "k", "ine", "';", "Ġf", "name", "Ġ=", "Ġfull", "file", "(", "C", "Gen", ".", "sy", "mp", "ath", ",[", "sym", "name", ",'", ".", "mat", "']", ");", "Ġif", "Ġexist", "(", "f", "name", ",'", "file", "')", "Ġtmp", "Struct", "Ġ=", "Ġload", "(", "f", "name", ");", "Ġelse", "Ġerror", "Ġ('", "gen", "m", "fun", "f", "k", "ine", ":", "Sy", "mb", "olics", "Not", "Found", "','", "Save", "Ġsymbolic", "Ġexpressions", "Ġto", "Ġdisk", "Ġfirst", "!", "')", "Ġend", "ĠC", "Gen", ".", "log", "msg", "([", "dat", "est", "r", "(", "now", "),", "'", "\\", "t", "Gener", "ating", "Ġforward", "Ġk", "inem", "atics", "Ġc", "-", "code", "Ġup", "Ġto", "Ġthe", "Ġend", "-", "effect", "or", "Ġframe", ":", "Ġ'", "]);", "Ġsrc", "Dir", "Ġ=", "Ġfull", "file", "(", "C", "Gen", ".", "cc", "od", "ep", "ath", ",'", "src", "');", "Ġh", "dr", "Dir", "Ġ=", "Ġfull", "file", "(", "C", "Gen", ".", "cc", "od", "ep", "ath", ",'", "include", "');", "Ġif", "Ġ~", "exist", "(", "src", "Dir", ",'", "dir", "')", "Ġmk", "dir", "(", "src", "Dir", ");", "Ġend", "Ġif", "Ġ~", "exist", "(", "h", "dr", "Dir", ",'", "dir", "')", "Ġmk", "dir", "(", "h", "dr", "Dir", ");", "Ġend", "Ġfun", "name", "Ġ=", "Ġ[", "C", "Gen", ".", "get", "ro", "bf", "name", ",'", "_", "',", "sym", "name", "];", "Ġfun", "filename", "Ġ=", "Ġ[", "fun", "name", ",'", ".", "c", "'", "];", "Ġh", "filename", "Ġ=", "Ġ[", "fun", "name", ",'", ".", "h", "'", "];", "ĠQ", "Ġ=", "ĠC", "Gen", ".", "rob", ".", "gen", "co", "ords", ";", "Ġ[", "fun", "str", "Ġh", "string", "]", "Ġ=", "Ġc", "cod", "ef", "unction", "string", "(", "tmp", "Struct", ".(", "sym", "name", "),", "...", "Ġ'", "fun", "name", "',", "fun", "name", ",...", "Ġ'", "v", "ars", "',", "{", "Q", "}", ",'", "output", "','", "T", "');", "Ġh", "Struct", ".", "c", "alls", "Ġ=", "Ġh", "string", ";", "Ġh", "F", "String", "Ġ=", "ĠC", "Gen", ".", "construct", "header", "string", "c", "(", "h", "Struct", ");", "Ġfid", "Ġ=", "Ġf", "open", "(", "full", "file", "(", "src", "Dir", ",", "fun", "filename", "),", "'", "w", "+", "');", "Ġ['", "#", "include", "Ġ\"", "',", "Ġh", "filename", ",'\"", "']", ");", "Ġf", "close", "(", "f", "id", ");", "Ġfid", "Ġ=", "Ġf", "open", "(", "full", "file", "(", "h", "dr", "Dir", ",", "h", "filename", "),", "'", "w", "+", "');", "Ġ['", "#", "if", "nd", "ef", "Ġ',", "Ġupper", "([", "fun", "name", ",'", "_", "h", "'", "])", "],", "...", "Ġ['", "#", "define", "Ġ',", "Ġupper", "([", "fun", "name", ",'", "_", "h", "'", "])", "]);", "Ġ'", "#", "include", "Ġ\"", "math", ".", "h", "\"", "');", "Ġ['", "#", "endif", "Ġ/*", "',", "Ġupper", "([", "fun", "name", ",'", "_", "h", "Ġ*/", "'", "])", "]);", "Ġf", "close", "(", "f", "id", ");", "ĠC", "Gen", ".", "log", "msg", "([", "dat", "est", "r", "(", "now", "),", "'", "\\", "t", "Gener", "ating", "Ġforward", "Ġk", "inem", "atics", "Ġm", "-", "function", "Ġup", "Ġto", "Ġjoint", ":", "Ġ'", "]);", "Ġfor", "Ġi", "J", "oint", "s", "=", "1", ":", "C", "Gen", ".", "rob", ".", "n", "Ġsym", "name", "Ġ=", "Ġ['", "T", "0", "_", "',", "num", "2", "str", "(", "i", "J", "oint", "s", ")", "];", "Ġf", "name", "Ġ=", "Ġfull", "file", "(", "C", "Gen", ".", "sy", "mp", "ath", ",[", "sym", "name", ",'", ".", "mat", "']", ");", "Ġtmp", "Struct", "Ġ=", "Ġstruct", ";", "Ġtmp", "Struct", "Ġ=", "Ġload", "(", "f", "name", ");", "Ġfun", "name", "Ġ=", "Ġ[", "C", "Gen", ".", "get", "ro", "bf", "name", ",'", "_", "',", "sym", "name", "];", "Ġfun", "filename", "Ġ=", "Ġ[", "fun", "name", ",'", ".", "c", "'", "];", "Ġh", "filename", "Ġ=", "Ġ[", "fun", "name", ",'", ".", "h", "'", "];", "ĠQ", "Ġ=", "ĠC", "Gen", ".", "rob", ".", "gen", "co", "ords", ";", "Ġ[", "fun", "str", "Ġh", "string", "]", "Ġ=", "Ġc", "cod", "ef", "unction", "string", "(", "tmp", "Struct", ".(", "sym", "name", "),", "...", "Ġ'", "fun", "name", "',", "fun", "name", ",...", "Ġ'", "v", "ars", "',", "{", "Q", "}", ",'", "output", "','", "T", "');", "Ġh", "Struct", ".", "c", "alls", "Ġ=", "Ġh", "string", ";", "Ġh", "F", "String", "Ġ=", "ĠC", "Gen", ".", "construct", "header", "string", "c", "(", "h", "Struct", ");", "Ġfid", "Ġ=", "Ġf", "open", "(", "full", "file", "(", "src", "Dir", ",", "fun", "filename", "),", "'", "w", "+", "');", "Ġ['", "#", "include", "Ġ\"", "',", "Ġh", "filename", ",'\"", "']", ");", "Ġf", "close", "(", "f", "id", ");", "Ġfid", "Ġ=", "Ġf", "open", "(", "full", "file", "(", "h", "dr", "Dir", ",", "h", "filename", "),", "'", "w", "+", "');", "Ġ['", "#", "if", "nd", "ef", "Ġ',", "Ġupper", "([", "fun", "name", ",'", "_", "h", "'", "])", "],", "...", "Ġ['", "#", "define", "Ġ',", "Ġupper", "([", "fun", "name", ",'", "_", "h", "'", "])", "]);", "Ġ'", "#", "include", "Ġ\"", "math", ".", "h", "\"", "');", "Ġ['", "#", "endif", "Ġ/*", "',", "Ġupper", "([", "fun", "name", ",'", "_", "h", "Ġ*/", "'", "])", "]);", "Ġf", "close", "(", "f", "id", ");", "Ġend", "Ġend"], "docstring": "Check for existance symbolic expressions", "docstring_tokens": ["Check", "Ġfor", "Ġexist", "ance", "Ġsymbolic", "Ġexpressions"], "partition": "valid"}
{"path": "GitHub-Crawler-Matlab/robotics-toolbox-matlab-master/@CodeGenerator/genslblockfkine.m", "language": "matlab", "code": "function genslblockfkine(CGen)\n\n\nload_system('simulink');\n\n\nCGen.createnewblocklibrary;\n\nend\n\nopen_system(CGen.slibpath);\n\nset_param(CGen.slib,'lock','off');\n\nq = CGen.rob.gencoords;\n\n\nCGen.logmsg([datestr(now),'\\tGenerating forward kinematics Simulink block up to the end-effector frame']);\n\nsymname = 'fkine';\n\nfname = fullfile(CGen.sympath,[symname,'.mat']);\n\nif exist(fname,'file')\n\ntmpStruct = load(fname);\n\nelse\n\nerror ('genslblockfkine:SymbolicsNotFound','Save symbolic expressions to disk first!')\n\nend\n\n\n\ndelete_block(blockaddress);\n\nsave_system;\n\nend\n\nsymexpr2slblock(blockaddress,tmpStruct.(symname).T,'vars',{q});\n\n\n\nCGen.logmsg([datestr(now),'\\tGenerating forward kinematics Simulink block up to joint']);\n\nfor iJoints=1:CGen.rob.n\n\n\nsymname = ['T0_',num2str(iJoints)];\n\nfname = fullfile(CGen.sympath,[symname,'.mat']);\n\ntmpStruct = struct;\n\ntmpStruct = load(fname);\n\nfunFileName = fullfile(CGen.robjpath,[symname,'.m']);\n\nq = CGen.rob.gencoords;\n\n\nif doesblockexist(CGen.slib,symname)\n\ndelete_block(blockaddress);\n\nsave_system;\n\nend\n\nsymexpr2slblock(blockaddress,tmpStruct.(symname).T,'vars',{q});\n\nend\n\n\n\n\ndistributeblocks(CGen.slib);\n\n\nset_param(CGen.slib,'lock','on');\n\nsave_system(CGen.slib,CGen.slibpath);\n\nclose_system(CGen.slib);\n\nend\n", "code_tokens": ["function", "Ġg", "ens", "l", "block", "f", "k", "ine", "(", "C", "Gen", ")", "Ġload", "_", "system", "('", "sim", "ul", "ink", "');", "ĠC", "Gen", ".", "creat", "en", "ew", "block", "library", ";", "Ġend", "Ġopen", "_", "system", "(", "C", "Gen", ".", "sl", "ib", "path", ");", "Ġset", "_", "param", "(", "C", "Gen", ".", "sl", "ib", ",'", "lock", "','", "off", "');", "Ġq", "Ġ=", "ĠC", "Gen", ".", "rob", ".", "gen", "co", "ords", ";", "ĠC", "Gen", ".", "log", "msg", "([", "dat", "est", "r", "(", "now", "),", "'", "\\", "t", "Gener", "ating", "Ġforward", "Ġk", "inem", "atics", "ĠSim", "ul", "ink", "Ġblock", "Ġup", "Ġto", "Ġthe", "Ġend", "-", "effect", "or", "Ġframe", "']", ");", "Ġsym", "name", "Ġ=", "Ġ'", "f", "k", "ine", "';", "Ġf", "name", "Ġ=", "Ġfull", "file", "(", "C", "Gen", ".", "sy", "mp", "ath", ",[", "sym", "name", ",'", ".", "mat", "']", ");", "Ġif", "Ġexist", "(", "f", "name", ",'", "file", "')", "Ġtmp", "Struct", "Ġ=", "Ġload", "(", "f", "name", ");", "Ġelse", "Ġerror", "Ġ('", "g", "ens", "l", "block", "f", "k", "ine", ":", "Sy", "mb", "olics", "Not", "Found", "','", "Save", "Ġsymbolic", "Ġexpressions", "Ġto", "Ġdisk", "Ġfirst", "!", "')", "Ġend", "Ġdelete", "_", "block", "(", "block", "address", ");", "Ġsave", "_", "system", ";", "Ġend", "Ġsym", "expr", "2", "sl", "block", "(", "block", "address", ",", "tmp", "Struct", ".(", "sym", "name", ").", "T", ",'", "v", "ars", "',", "{", "q", "});", "ĠC", "Gen", ".", "log", "msg", "([", "dat", "est", "r", "(", "now", "),", "'", "\\", "t", "Gener", "ating", "Ġforward", "Ġk", "inem", "atics", "ĠSim", "ul", "ink", "Ġblock", "Ġup", "Ġto", "Ġjoint", "']", ");", "Ġfor", "Ġi", "J", "oint", "s", "=", "1", ":", "C", "Gen", ".", "rob", ".", "n", "Ġsym", "name", "Ġ=", "Ġ['", "T", "0", "_", "',", "num", "2", "str", "(", "i", "J", "oint", "s", ")", "];", "Ġf", "name", "Ġ=", "Ġfull", "file", "(", "C", "Gen", ".", "sy", "mp", "ath", ",[", "sym", "name", ",'", ".", "mat", "']", ");", "Ġtmp", "Struct", "Ġ=", "Ġstruct", ";", "Ġtmp", "Struct", "Ġ=", "Ġload", "(", "f", "name", ");", "Ġfun", "File", "Name", "Ġ=", "Ġfull", "file", "(", "C", "Gen", ".", "rob", "j", "path", ",[", "sym", "name", ",'", ".", "m", "']", ");", "Ġq", "Ġ=", "ĠC", "Gen", ".", "rob", ".", "gen", "co", "ords", ";", "Ġif", "Ġdoes", "bl", "oc", "ke", "x", "ist", "(", "C", "Gen", ".", "sl", "ib", ",", "sym", "name", ")", "Ġdelete", "_", "block", "(", "block", "address", ");", "Ġsave", "_", "system", ";", "Ġend", "Ġsym", "expr", "2", "sl", "block", "(", "block", "address", ",", "tmp", "Struct", ".(", "sym", "name", ").", "T", ",'", "v", "ars", "',", "{", "q", "});", "Ġend", "Ġdistribute", "blocks", "(", "C", "Gen", ".", "sl", "ib", ");", "Ġset", "_", "param", "(", "C", "Gen", ".", "sl", "ib", ",'", "lock", "','", "on", "');", "Ġsave", "_", "system", "(", "C", "Gen", ".", "sl", "ib", ",", "C", "Gen", ".", "sl", "ib", "path", ");", "Ġclose", "_", "system", "(", "C", "Gen", ".", "sl", "ib", ");", "Ġend"], "docstring": "Open or create block library", "docstring_tokens": ["Open", "Ġor", "Ġcreate", "Ġblock", "Ġlibrary"], "partition": "valid"}
{"path": "GitHub-Crawler-Matlab/Probabilistic-Graphical-Models-master/7.CRF Learning for OCR/ComputeJointDistribution.m", "language": "matlab", "code": "function Joint = ComputeJointDistribution(F)\n\nassert(numel(F) ~= 0, 'Error: empty factor list');\n\nif (length(F) == 0)\n\n\nJoint = struct('var', [], 'card', [], 'val', []);\n\nelse    \n\nJoint = F(1);\n\nfor i = 2:length(F)\n\n\nJoint = FactorProduct(Joint, F(i));\n\nend\n\nend\n\nend\n", "code_tokens": ["function", "ĠJoint", "Ġ=", "ĠComp", "ute", "J", "oint", "Dist", "ribution", "(", "F", ")", "Ġassert", "(", "num", "el", "(", "F", ")", "Ġ~", "=", "Ġ0", ",", "Ġ'", "Error", ":", "Ġempty", "Ġfactor", "Ġlist", "');", "Ġif", "Ġ(", "length", "(", "F", ")", "Ġ==", "Ġ0", ")", "ĠJoint", "Ġ=", "Ġstruct", "('", "var", "',", "Ġ[", "],", "Ġ'", "card", "',", "Ġ[", "],", "Ġ'", "val", "',", "Ġ[]", ");", "Ġelse", "ĠJoint", "Ġ=", "ĠF", "(", "1", ");", "Ġfor", "Ġi", "Ġ=", "Ġ2", ":", "length", "(", "F", ")", "ĠJoint", "Ġ=", "ĠFactor", "Product", "(", "J", "oint", ",", "ĠF", "(", "i", "));", "Ġend", "Ġend", "Ġend"], "docstring": "Check for empty factor list", "docstring_tokens": ["Check", "Ġfor", "Ġempty", "Ġfactor", "Ġlist"], "partition": "valid"}
{"path": "GitHub-Crawler-Matlab/pulmonarytoolkit-master/External/mim/Framework/MimMemoryCache.m", "language": "matlab", "code": "function SaveWithInfo(obj, name, value, info, context, cache_policy, reporting)\n\nobj.Add(name, value, info, context, cache_policy, reporting);\n\nend\n", "code_tokens": ["function", "ĠSave", "With", "Info", "(", "obj", ",", "Ġname", ",", "Ġvalue", ",", "Ġinfo", ",", "Ġcontext", ",", "Ġcache", "_", "policy", ",", "Ġreporting", ")", "Ġobj", ".", "Add", "(", "name", ",", "Ġvalue", ",", "Ġinfo", ",", "Ġcontext", ",", "Ġcache", "_", "policy", ",", "Ġreporting", ");", "Ġend"], "docstring": "Save a result to the cache", "docstring_tokens": ["Save", "Ġa", "Ġresult", "Ġto", "Ġthe", "Ġcache"], "partition": "valid"}
{"path": "GitHub-Crawler-Matlab/ecg-kit-master/common/export_fig/export_fig.m", "language": "matlab", "code": "function [fig, options] = parse_args(nout, fig, varargin)\n\noptions = struct(...\n\n'name', 'export_fig_out', ...\n\n'crop', true, ...\n\n'transparent', false, ...\n\n\n'pdf', false, ...\n\n'eps', false, ...\n\n'png', false, ...\n\n'tif', false, ...\n\n'jpg', false, ...\n\n'bmp', false, ...\n\n\n'append', false, ...\n\n'im', nout == 1, ...\n\n'alpha', nout == 2, ...\n\n'aa_factor', 0, ...\n\n'bb_padding', 0, ...\n\n'magnify', [], ...\n\n'resolution', [], ...\n\n'bookmark', false, ...\n\n'closeFig', false, ...\n\n'quality', [], ...\n\n'gs_options', {{}});\n\n\n\nskipNext = false;\n\nfor a = 1:nargin-2\n\nif skipNext\n\nskipNext = false;\n\ncontinue;\n\nend\n\nif all(ishandle(varargin{a}))\n\nfig = varargin{a};\n\nelseif ischar(varargin{a}) && ~isempty(varargin{a})\n\nif varargin{a}(1) == '-'\n\nswitch lower(varargin{a}(2:end))\n\ncase 'nocrop'\n\noptions.crop = false;\n\ncase {'trans', 'transparent'}\n\noptions.transparent = true;\n\ncase 'opengl'\n\noptions.renderer = 1;\n\ncase 'zbuffer'\n\noptions.renderer = 2;\n\ncase 'painters'\n\noptions.renderer = 3;\n\ncase 'pdf'\n\noptions.pdf = true;\n\ncase 'eps'\n\noptions.eps = true;\n\ncase 'png'\n\noptions.png = true;\n\ncase {'tif', 'tiff'}\n\noptions.tif = true;\n\ncase {'jpg', 'jpeg'}\n\noptions.jpg = true;\n\ncase 'bmp'\n\noptions.bmp = true;\n\ncase 'rgb'\n\noptions.colourspace = 0;\n\ncase 'cmyk'\n\noptions.colourspace = 1;\n\ncase {'gray', 'grey'}\n\noptions.colourspace = 2;\n\ncase {'a1', 'a2', 'a3', 'a4'}\n\noptions.aa_factor = str2double(varargin{a}(3));\n\ncase 'append'\n\noptions.append = true;\n\ncase 'bookmark'\n\noptions.bookmark = true;\n\ncase 'native'\n\nnative = true;\n\notherwise\n\nif strcmpi(varargin{a}(1:2),'-d')\n\n\noptions.gs_options{end+1} = varargin{a};\n\nelse\n\nval = str2double(regexp(varargin{a}, '(?<=-(m|M|r|R|q|Q|p|P))-?\\d*.?\\d+', 'match'));\n\nif isempty(val)\n\n\nval = str2double(varargin{a+1});\n\nif isscalar(val) && ~isnan(val)\n\nskipNext = true;\n\nend\n\nend\n\nif ~isscalar(val) && ~isnan(val)\n\n\nend\n\nswitch lower(varargin{a}(2))\n\ncase 'm'\n\noptions.magnify = val;\n\ncase 'r'\n\noptions.resolution = val;\n\ncase 'q'\n\noptions.quality = max(val, 0);\n\ncase 'p'\n\noptions.bb_padding = val;\n\nend\n\nend\n\nend\n\nelse\n\n[p, options.name, ext] = fileparts(varargin{a});\n\nif ~isempty(p)\n\noptions.name = [p filesep options.name];\n\nend\n\nswitch lower(ext)\n\ncase {'.tif', '.tiff'}\n\noptions.tif = true;\n\ncase {'.jpg', '.jpeg'}\n\noptions.jpg = true;\n\ncase '.png'\n\noptions.png = true;\n\ncase '.bmp'\n\noptions.bmp = true;\n\ncase '.eps'\n\noptions.eps = true;\n\ncase '.pdf'\n\noptions.pdf = true;\n\ncase '.fig'\n\n\nif isempty(fig)\n\nfig = openfig(varargin{a},'invisible');\n\nvarargin{a} = fig;\n\noptions.closeFig = true;\n\nelse\n\n\nsaveas(fig(1),varargin{a});\n\nfig = -1;\n\nreturn\n\nend\n\notherwise\n\noptions.name = varargin{a};\n\nend\n\nend\n\nend\n\nend\n\n\nif isempty(fig),  return;  end\n\n\nif options.bb_padding\n\noptions.crop = true;\n\nend\n\n\nif options.aa_factor == 0\n\noptions.aa_factor = 1 + 2 * (~(using_hg2(fig) && strcmp(get(ancestor(fig, 'figure'), 'GraphicsSmoothing'), 'on')) | (options.renderer == 3));\n\nend\n\n\nif numel(options.name) > 2 && options.name(1) == '~' && (options.name(2) == '/' || options.name(2) == '\\')\n\noptions.name = fullfile(char(java.lang.System.getProperty('user.home')), options.name(2:end));\n\nend\n\n\nif isempty(options.magnify)\n\nif isempty(options.resolution)\n\noptions.magnify = 1;\n\noptions.resolution = 864;\n\nelse\n\noptions.magnify = options.resolution ./ get(0, 'ScreenPixelsPerInch');\n\nend\n\nelseif isempty(options.resolution)\n\noptions.resolution = 864;\n\nend\n\n\nif ~isvector(options) && ~isbitmap(options)\n\noptions.png = true;\n\nend\n\n\nif isequal(get(ancestor(fig(1), 'figure'), 'Color'), 'none')\n\noptions.transparent = true;\n\nend\n\n\n\nif native && isbitmap(options)\n\n\nlist = findall(fig, 'Type','image', 'Tag','export_fig_native');\n\nif isempty(list)\n\nlist = findall(fig, 'Type','image', 'Visible','on');\n\nend\n\nfor hIm = list(:)'\n\n\nheight = size(get(hIm, 'CData'), 1);\n\nif height < 2\n\ncontinue\n\nend\n\n\n\nyl = get(hIm, 'YData');\n\nif isscalar(yl)\n\nyl = [yl(1)-0.5 yl(1)+height+0.5];\n\nelse\n\nif ~diff(yl)\n\ncontinue\n\nend\n\nyl = yl + [-0.5 0.5] * (diff(yl) / (height - 1));\n\nend\n\nhAx = get(hIm, 'Parent');\n\nyl2 = get(hAx, 'YLim');\n\n\noldUnits = get(hAx, 'Units');\n\nset(hAx, 'Units', 'pixels');\n\npos = get(hAx, 'Position');\n\nset(hAx, 'Units', oldUnits);\n\nif ~pos(4)\n\ncontinue\n\nend\n\n\n\npbar = get(hAx, 'PlotBoxAspectRatio');\n\npos = min(pos(4), pbar(2)*pos(3)/pbar(1));\n\n\noptions.magnify = (height * diff(yl2)) / (pos * diff(yl));\n\nbreak\n\nend\n\nend\n\nend\n", "code_tokens": ["function", "Ġ[", "fig", ",", "Ġoptions", "]", "Ġ=", "Ġparse", "_", "args", "(", "n", "out", ",", "Ġfig", ",", "Ġvar", "arg", "in", ")", "Ġoptions", "Ġ=", "Ġstruct", "(", "...", "Ġ'", "name", "',", "Ġ'", "export", "_", "fig", "_", "out", "',", "Ġ...", "Ġ'", "crop", "',", "Ġtrue", ",", "Ġ...", "Ġ'", "trans", "parent", "',", "Ġfalse", ",", "Ġ...", "Ġ'", "pdf", "',", "Ġfalse", ",", "Ġ...", "Ġ'", "eps", "',", "Ġfalse", ",", "Ġ...", "Ġ'", "png", "',", "Ġfalse", ",", "Ġ...", "Ġ'", "tif", "',", "Ġfalse", ",", "Ġ...", "Ġ'", "jpg", "',", "Ġfalse", ",", "Ġ...", "Ġ'", "b", "mp", "',", "Ġfalse", ",", "Ġ...", "Ġ'", "append", "',", "Ġfalse", ",", "Ġ...", "Ġ'", "im", "',", "Ġn", "out", "Ġ==", "Ġ1", ",", "Ġ...", "Ġ'", "alpha", "',", "Ġn", "out", "Ġ==", "Ġ2", ",", "Ġ...", "Ġ'", "aa", "_", "factor", "',", "Ġ0", ",", "Ġ...", "Ġ'", "bb", "_", "padding", "',", "Ġ0", ",", "Ġ...", "Ġ'", "m", "agn", "ify", "',", "Ġ[", "],", "Ġ...", "Ġ'", "resolution", "',", "Ġ[", "],", "Ġ...", "Ġ'", "book", "mark", "',", "Ġfalse", ",", "Ġ...", "Ġ'", "close", "Fig", "',", "Ġfalse", ",", "Ġ...", "Ġ'", "quality", "',", "Ġ[", "],", "Ġ...", "Ġ'", "gs", "_", "options", "',", "Ġ{{", "}}", ");", "Ġskip", "Next", "Ġ=", "Ġfalse", ";", "Ġfor", "Ġa", "Ġ=", "Ġ1", ":", "nargin", "-", "2", "Ġif", "Ġskip", "Next", "Ġskip", "Next", "Ġ=", "Ġfalse", ";", "Ġcontinue", ";", "Ġend", "Ġif", "Ġall", "(", "ish", "and", "le", "(", "var", "arg", "in", "{", "a", "}", "))", "Ġfig", "Ġ=", "Ġvar", "arg", "in", "{", "a", "};", "elseif", "is", "char", "(", "var", "arg", "in", "{", "a", "})", "Ġ&&", "Ġ~", "is", "empty", "(", "var", "arg", "in", "{", "a", "})", "Ġif", "Ġvar", "arg", "in", "{", "a", "}", "(", "1", ")", "Ġ==", "Ġ'", "-'", "Ġswitch", "Ġlower", "(", "var", "arg", "in", "{", "a", "}", "(", "2", ":", "end", "))", "Ġcase", "Ġ'", "n", "oc", "rop", "'", "Ġoptions", ".", "crop", "Ġ=", "Ġfalse", ";", "Ġcase", "Ġ{", "'", "trans", "',", "Ġ'", "trans", "parent", "'", "}", "Ġoptions", ".", "trans", "parent", "Ġ=", "Ġtrue", ";", "Ġcase", "Ġ'", "op", "eng", "l", "'", "Ġoptions", ".", "rend", "erer", "Ġ=", "Ġ1", ";", "Ġcase", "Ġ'", "zb", "uffer", "'", "Ġoptions", ".", "rend", "erer", "Ġ=", "Ġ2", ";", "Ġcase", "Ġ'", "pain", "ters", "'", "Ġoptions", ".", "rend", "erer", "Ġ=", "Ġ3", ";", "Ġcase", "Ġ'", "pdf", "'", "Ġoptions", ".", "pdf", "Ġ=", "Ġtrue", ";", "Ġcase", "Ġ'", "eps", "'", "Ġoptions", ".", "eps", "Ġ=", "Ġtrue", ";", "Ġcase", "Ġ'", "png", "'", "Ġoptions", ".", "png", "Ġ=", "Ġtrue", ";", "Ġcase", "Ġ{", "'", "tif", "',", "Ġ'", "t", "iff", "'", "}", "Ġoptions", ".", "tif", "Ġ=", "Ġtrue", ";", "Ġcase", "Ġ{", "'", "jpg", "',", "Ġ'", "j", "peg", "'", "}", "Ġoptions", ".", "jpg", "Ġ=", "Ġtrue", ";", "Ġcase", "Ġ'", "b", "mp", "'", "Ġoptions", ".", "b", "mp", "Ġ=", "Ġtrue", ";", "Ġcase", "Ġ'", "r", "gb", "'", "Ġoptions", ".", "colour", "space", "Ġ=", "Ġ0", ";", "Ġcase", "Ġ'", "c", "my", "k", "'", "Ġoptions", ".", "colour", "space", "Ġ=", "Ġ1", ";", "Ġcase", "Ġ{", "'", "gray", "',", "Ġ'", "grey", "'", "}", "Ġoptions", ".", "colour", "space", "Ġ=", "Ġ2", ";", "Ġcase", "Ġ{", "'", "a", "1", "',", "Ġ'", "a", "2", "',", "Ġ'", "a", "3", "',", "Ġ'", "a", "4", "'", "}", "Ġoptions", ".", "aa", "_", "factor", "Ġ=", "Ġstr", "2", "double", "(", "var", "arg", "in", "{", "a", "}", "(", "3", "));", "Ġcase", "Ġ'", "append", "'", "Ġoptions", ".", "append", "Ġ=", "Ġtrue", ";", "Ġcase", "Ġ'", "book", "mark", "'", "Ġoptions", ".", "book", "mark", "Ġ=", "Ġtrue", ";", "Ġcase", "Ġ'", "native", "'", "Ġnative", "Ġ=", "Ġtrue", ";", "Ġotherwise", "Ġif", "Ġstr", "cmp", "i", "(", "var", "arg", "in", "{", "a", "}", "(", "1", ":", "2", "),", "'-", "d", "')", "Ġoptions", ".", "gs", "_", "options", "{", "end", "+", "1", "}", "Ġ=", "Ġvar", "arg", "in", "{", "a", "};", "Ġelse", "Ġval", "Ġ=", "Ġstr", "2", "double", "(", "re", "gex", "p", "(", "var", "arg", "in", "{", "a", "},", "Ġ'(", "?", "<", "=-", "(", "m", "|", "M", "|", "r", "|", "R", "|", "q", "|", "Q", "|", "p", "|", "P", "))", "-", "?", "\\", "d", "*.", "?", "\\", "d", "+", "',", "Ġ'", "match", "')", ");", "Ġif", "Ġis", "empty", "(", "val", ")", "Ġval", "Ġ=", "Ġstr", "2", "double", "(", "var", "arg", "in", "{", "a", "+", "1", "});", "Ġif", "Ġiss", "cal", "ar", "(", "val", ")", "Ġ&&", "Ġ~", "is", "nan", "(", "val", ")", "Ġskip", "Next", "Ġ=", "Ġtrue", ";", "Ġend", "Ġend", "Ġif", "Ġ~", "iss", "cal", "ar", "(", "val", ")", "Ġ&&", "Ġ~", "is", "nan", "(", "val", ")", "Ġend", "Ġswitch", "Ġlower", "(", "var", "arg", "in", "{", "a", "}", "(", "2", "))", "Ġcase", "Ġ'", "m", "'", "Ġoptions", ".", "m", "agn", "ify", "Ġ=", "Ġval", ";", "Ġcase", "Ġ'", "r", "'", "Ġoptions", ".", "resolution", "Ġ=", "Ġval", ";", "Ġcase", "Ġ'", "q", "'", "Ġoptions", ".", "quality", "Ġ=", "Ġmax", "(", "val", ",", "Ġ0", ");", "Ġcase", "Ġ'", "p", "'", "Ġoptions", ".", "bb", "_", "padding", "Ġ=", "Ġval", ";", "Ġend", "Ġend", "Ġend", "Ġelse", "Ġ[", "p", ",", "Ġoptions", ".", "name", ",", "Ġext", "]", "Ġ=", "Ġfile", "parts", "(", "var", "arg", "in", "{", "a", "});", "Ġif", "Ġ~", "is", "empty", "(", "p", ")", "Ġoptions", ".", "name", "Ġ=", "Ġ[", "p", "Ġfiles", "ep", "Ġoptions", ".", "name", "];", "Ġend", "Ġswitch", "Ġlower", "(", "ext", ")", "Ġcase", "Ġ{", "'.", "tif", "',", "Ġ'.", "t", "iff", "'", "}", "Ġoptions", ".", "tif", "Ġ=", "Ġtrue", ";", "Ġcase", "Ġ{", "'.", "jpg", "',", "Ġ'.", "j", "peg", "'", "}", "Ġoptions", ".", "jpg", "Ġ=", "Ġtrue", ";", "Ġcase", "Ġ'.", "png", "'", "Ġoptions", ".", "png", "Ġ=", "Ġtrue", ";", "Ġcase", "Ġ'.", "b", "mp", "'", "Ġoptions", ".", "b", "mp", "Ġ=", "Ġtrue", ";", "Ġcase", "Ġ'.", "eps", "'", "Ġoptions", ".", "eps", "Ġ=", "Ġtrue", ";", "Ġcase", "Ġ'.", "pdf", "'", "Ġoptions", ".", "pdf", "Ġ=", "Ġtrue", ";", "Ġcase", "Ġ'.", "fig", "'", "Ġif", "Ġis", "empty", "(", "fig", ")", "Ġfig", "Ġ=", "Ġopen", "fig", "(", "var", "arg", "in", "{", "a", "}", ",'", "in", "visible", "');", "Ġvar", "arg", "in", "{", "a", "}", "Ġ=", "Ġfig", ";", "Ġoptions", ".", "close", "Fig", "Ġ=", "Ġtrue", ";", "Ġelse", "Ġsave", "as", "(", "fig", "(", "1", "),", "var", "arg", "in", "{", "a", "});", "Ġfig", "Ġ=", "Ġ-", "1", ";", "Ġreturn", "Ġend", "Ġotherwise", "Ġoptions", ".", "name", "Ġ=", "Ġvar", "arg", "in", "{", "a", "};", "Ġend", "Ġend", "Ġend", "Ġend", "Ġif", "Ġis", "empty", "(", "fig", "),", "Ġreturn", ";", "Ġend", "Ġif", "Ġoptions", ".", "bb", "_", "padding", "Ġoptions", ".", "crop", "Ġ=", "Ġtrue", ";", "Ġend", "Ġif", "Ġoptions", ".", "aa", "_", "factor", "Ġ==", "Ġ0", "Ġoptions", ".", "aa", "_", "factor", "Ġ=", "Ġ1", "Ġ+", "Ġ2", "Ġ*", "Ġ(~", "(", "using", "_", "h", "g", "2", "(", "fig", ")", "Ġ&&", "Ġstr", "cmp", "(", "get", "(", "anc", "est", "or", "(", "fig", ",", "Ġ'", "figure", "'),", "Ġ'", "Graphics", "Sm", "oot", "hing", "'),", "Ġ'", "on", "'", "))", "Ġ|", "Ġ(", "options", ".", "rend", "erer", "Ġ==", "Ġ3", "));", "Ġend", "Ġif", "Ġnum", "el", "(", "options", ".", "name", ")", "Ġ>", "Ġ2", "Ġ&&", "Ġoptions", ".", "name", "(", "1", ")", "Ġ==", "Ġ'", "~", "'", "Ġ&&", "Ġ(", "options", ".", "name", "(", "2", ")", "Ġ==", "Ġ'/", "'", "Ġ||", "Ġoptions", ".", "name", "(", "2", ")", "Ġ==", "Ġ'", "\\", "')", "Ġoptions", ".", "name", "Ġ=", "Ġfull", "file", "(", "char", "(", "java", ".", "lang", ".", "System", ".", "get", "Property", "('", "user", ".", "home", "')", "),", "Ġoptions", ".", "name", "(", "2", ":", "end", "));", "Ġend", "Ġif", "Ġis", "empty", "(", "options", ".", "m", "agn", "ify", ")", "Ġif", "Ġis", "empty", "(", "options", ".", "resolution", ")", "Ġoptions", ".", "m", "agn", "ify", "Ġ=", "Ġ1", ";", "Ġoptions", ".", "resolution", "Ġ=", "Ġ8", "64", ";", "Ġelse", "Ġoptions", ".", "m", "agn", "ify", "Ġ=", "Ġoptions", ".", "resolution", "Ġ./", "Ġget", "(", "0", ",", "Ġ'", "Screen", "P", "ixels", "Per", "In", "ch", "');", "Ġend", "elseif", "is", "empty", "(", "options", ".", "resolution", ")", "Ġoptions", ".", "resolution", "Ġ=", "Ġ8", "64", ";", "Ġend", "Ġif", "Ġ~", "is", "vector", "(", "options", ")", "Ġ&&", "Ġ~", "is", "bit", "map", "(", "options", ")", "Ġoptions", ".", "png", "Ġ=", "Ġtrue", ";", "Ġend", "Ġif", "Ġis", "equal", "(", "get", "(", "anc", "est", "or", "(", "fig", "(", "1", "),", "Ġ'", "figure", "'),", "Ġ'", "Color", "'),", "Ġ'", "none", "')", "Ġoptions", ".", "trans", "parent", "Ġ=", "Ġtrue", ";", "Ġend", "Ġif", "Ġnative", "Ġ&&", "Ġis", "bit", "map", "(", "options", ")", "Ġlist", "Ġ=", "Ġfind", "all", "(", "fig", ",", "Ġ'", "Type", "','", "image", "',", "Ġ'", "Tag", "','", "export", "_", "fig", "_", "native", "');", "Ġif", "Ġis", "empty", "(", "list", ")", "Ġlist", "Ġ=", "Ġfind", "all", "(", "fig", ",", "Ġ'", "Type", "','", "image", "',", "Ġ'", "V", "isible", "','", "on", "');", "Ġend", "Ġfor", "Ġh", "Im", "Ġ=", "Ġlist", "(", ":", ")'", "Ġheight", "Ġ=", "Ġsize", "(", "get", "(", "h", "Im", ",", "Ġ'", "C", "Data", "'),", "Ġ1", ");", "Ġif", "Ġheight", "Ġ<", "Ġ2", "Ġcontinue", "Ġend", "Ġy", "l", "Ġ=", "Ġget", "(", "h", "Im", ",", "Ġ'", "Y", "Data", "');", "Ġif", "Ġiss", "cal", "ar", "(", "yl", ")", "Ġy", "l", "Ġ=", "Ġ[", "yl", "(", "1", ")-", "0", ".", "5", "Ġy", "l", "(", "1", ")+", "height", "+", "0", ".", "5", "];", "Ġelse", "Ġif", "Ġ~", "diff", "(", "yl", ")", "Ġcontinue", "Ġend", "Ġy", "l", "Ġ=", "Ġy", "l", "Ġ+", "Ġ[-", "0", ".", "5", "Ġ0", ".", "5", "]", "Ġ*", "Ġ(", "diff", "(", "yl", ")", "Ġ/", "Ġ(", "height", "Ġ-", "Ġ1", "));", "Ġend", "Ġh", "Ax", "Ġ=", "Ġget", "(", "h", "Im", ",", "Ġ'", "Parent", "');", "Ġy", "l", "2", "Ġ=", "Ġget", "(", "h", "Ax", ",", "Ġ'", "Y", "Lim", "');", "Ġold", "Un", "its", "Ġ=", "Ġget", "(", "h", "Ax", ",", "Ġ'", "Un", "its", "');", "Ġset", "(", "h", "Ax", ",", "Ġ'", "Un", "its", "',", "Ġ'", "p", "ixels", "');", "Ġpos", "Ġ=", "Ġget", "(", "h", "Ax", ",", "Ġ'", "Position", "');", "Ġset", "(", "h", "Ax", ",", "Ġ'", "Un", "its", "',", "Ġold", "Un", "its", ");", "Ġif", "Ġ~", "pos", "(", "4", ")", "Ġcontinue", "Ġend", "Ġp", "bar", "Ġ=", "Ġget", "(", "h", "Ax", ",", "Ġ'", "Plot", "Box", "As", "pect", "Rat", "io", "');", "Ġpos", "Ġ=", "Ġmin", "(", "pos", "(", "4", "),", "Ġp", "bar", "(", "2", ")*", "pos", "(", "3", ")/", "p", "bar", "(", "1", "));", "Ġoptions", ".", "m", "agn", "ify", "Ġ=", "Ġ(", "height", "Ġ*", "Ġdiff", "(", "yl", "2", "))", "Ġ/", "Ġ(", "pos", "Ġ*", "Ġdiff", "(", "yl", "));", "Ġbreak", "Ġend", "Ġend", "Ġend"], "docstring": "Parse the input arguments", "docstring_tokens": ["Par", "se", "Ġthe", "Ġinput", "Ġarguments"], "partition": "valid"}