{"path": "GitHub-Crawler-Julia/Nemo.jl-master/src/flint/fq_nmod_mpoly.jl", "language": "julia", "code": "function coeff(a::fq_nmod_mpoly, exps::Vector{Int})\nz = base_ring(parent(a))()\nccall((:fq_nmod_mpoly_get_coeff_fq_nmod_ui, libflint), UInt,\n(Ref{fq_nmod}, Ref{fq_nmod_mpoly}, Ptr{Int}, Ref{FqNmodMPolyRing}),\nz, a, exps, parent(a))\nreturn z\nend", "code_tokens": ["function", "Ġco", "eff", "(", "a", "::", "f", "q", "_", "n", "mod", "_", "mp", "oly", ",", "Ġex", "ps", "::", "Vector", "{", "Int", "})", "Ġz", "Ġ=", "Ġbase", "_", "ring", "(", "parent", "(", "a", "))", "()", "Ġc", "call", "((", ":", "f", "q", "_", "n", "mod", "_", "mp", "oly", "_", "get", "_", "co", "eff", "_", "f", "q", "_", "n", "mod", "_", "ui", ",", "Ġlib", "fl", "int", "),", "ĠU", "Int", ",", "Ġ(", "Ref", "{", "f", "q", "_", "n", "mod", "},", "ĠRef", "{", "f", "q", "_", "n", "mod", "_", "mp", "oly", "},", "ĠP", "tr", "{", "Int", "},", "ĠRef", "{", "F", "q", "N", "mod", "MP", "oly", "Ring", "}", "),", "Ġz", ",", "Ġa", ",", "Ġex", "ps", ",", "Ġparent", "(", "a", "))", "Ġreturn", "Ġz", "Ġend"], "docstring": "Return the coefficient of the term with the given exponent vector", "docstring_tokens": ["Return", "Ġthe", "Ġcoefficient", "Ġof", "Ġthe", "Ġterm", "Ġwith", "Ġthe", "Ġgiven", "Ġexponent", "Ġvector"], "partition": "valid"}
{"path": "GitHub-Crawler-Julia/CUDA.jl-master/lib/cusparse/CUSPARSE.jl", "language": "julia", "code": "@noinline function new_state(cuda)\nnew_handle = pop!(idle_handles, cuda.context) do\ncusparseCreate()\nend\n\nfinalizer(current_task()) do task\npush!(idle_handles, cuda.context, new_handle) do\ncontext!(cuda.context; skip_destroyed=true) do\ncusparseDestroy(new_handle)\nend\nend\nend\n\ncusparseSetStream(new_handle, cuda.stream)\n\n(; handle=new_handle, cuda.stream)\nend", "code_tokens": ["@", "no", "inline", "Ġfunction", "Ġnew", "_", "state", "(", "c", "uda", ")", "Ġnew", "_", "handle", "Ġ=", "Ġpop", "!", "(", "id", "le", "_", "hand", "les", ",", "Ġc", "uda", ".", "context", ")", "Ġdo", "Ġc", "us", "parse", "Create", "()", "Ġend", "Ġfinal", "izer", "(", "current", "_", "task", "())", "Ġdo", "Ġtask", "Ġpush", "!", "(", "id", "le", "_", "hand", "les", ",", "Ġc", "uda", ".", "context", ",", "Ġnew", "_", "handle", ")", "Ġdo", "Ġcontext", "!", "(", "c", "uda", ".", "context", ";", "Ġskip", "_", "destroy", "ed", "=", "true", ")", "Ġdo", "Ġc", "us", "parse", "Destroy", "(", "new", "_", "handle", ")", "Ġend", "Ġend", "Ġend", "Ġc", "us", "parse", "Set", "Stream", "(", "new", "_", "handle", ",", "Ġc", "uda", ".", "stream", ")", "Ġ(", ";", "Ġhandle", "=", "new", "_", "handle", ",", "Ġc", "uda", ".", "stream", ")", "Ġend"], "docstring": "get library state", "docstring_tokens": ["get", "Ġlibrary", "Ġstate"], "partition": "valid"}
{"path": "GitHub-Crawler-Julia/Nemo.jl-master/src/flint/nmod_mpoly.jl", "language": "julia", "code": "function sort_terms!(a::($etype))\nccall((:nmod_mpoly_sort_terms, libflint), Nothing,\n(Ref{($etype)}, Ref{($rtype)}),\na, parent(a))\nreturn a\nend", "code_tokens": ["function", "Ġsort", "_", "terms", "!", "(", "a", "::", "($", "ety", "pe", "))", "Ġc", "call", "((", ":", "n", "mod", "_", "mp", "oly", "_", "sort", "_", "terms", ",", "Ġlib", "fl", "int", "),", "ĠNothing", ",", "Ġ(", "Ref", "{", "($", "ety", "pe", ")", "},", "ĠRef", "{", "($", "r", "type", ")}", "),", "Ġa", ",", "Ġparent", "(", "a", "))", "Ġreturn", "Ġa", "Ġend"], "docstring": "Sort the terms according to the ordering. ", "docstring_tokens": ["Sort", "Ġthe", "Ġterms", "Ġaccording", "Ġto", "Ġthe", "Ġordering", "."], "partition": "valid"}
{"path": "GitHub-Crawler-Julia/Trixi.jl-main/src/equations/compressible_euler_multicomponent_1d.jl", "language": "julia", "code": "@inline function flux(u, orientation::Integer, equations::CompressibleEulerMulticomponentEquations1D)\nrho_v1, rho_e  = u\n\nrho = density(u, equations)\n\nv1    = rho_v1/rho\ngamma = totalgamma(u, equations)\np     = (gamma - 1) * (rho_e - 0.5 * rho * v1^2)\n\nf_rho = densities(u, v1, equations)\nf1  = rho_v1 * v1 + p\nf2  = (rho_e + p) * v1\n\nf_other  = SVector{2, real(equations)}(f1, f2)\n\nreturn vcat(f_other, f_rho)\nend", "code_tokens": ["@", "inline", "Ġfunction", "Ġflux", "(", "u", ",", "Ġorientation", "::", "Integer", ",", "Ġequations", "::", "Comp", "ress", "ible", "E", "uler", "Mult", "ic", "omp", "onent", "Equ", "ations", "1", "D", ")", "Ġr", "ho", "_", "v", "1", ",", "Ġr", "ho", "_", "e", "Ġ=", "Ġu", "Ġr", "ho", "Ġ=", "Ġdensity", "(", "u", ",", "Ġequations", ")", "Ġv", "1", "Ġ=", "Ġr", "ho", "_", "v", "1", "/", "r", "ho", "Ġgamma", "Ġ=", "Ġtotal", "gam", "ma", "(", "u", ",", "Ġequations", ")", "Ġp", "Ġ=", "Ġ(", "gam", "ma", "Ġ-", "Ġ1", ")", "Ġ*", "Ġ(", "r", "ho", "_", "e", "Ġ-", "Ġ0", ".", "5", "Ġ*", "Ġr", "ho", "Ġ*", "Ġv", "1", "^", "2", ")", "Ġf", "_", "r", "ho", "Ġ=", "Ġdens", "ities", "(", "u", ",", "Ġv", "1", ",", "Ġequations", ")", "Ġf", "1", "Ġ=", "Ġr", "ho", "_", "v", "1", "Ġ*", "Ġv", "1", "Ġ+", "Ġp", "Ġf", "2", "Ġ=", "Ġ(", "r", "ho", "_", "e", "Ġ+", "Ġp", ")", "Ġ*", "Ġv", "1", "Ġf", "_", "other", "Ġ=", "ĠSV", "ector", "{", "2", ",", "Ġreal", "(", "equ", "ations", ")}", "(", "f", "1", ",", "Ġf", "2", ")", "Ġreturn", "Ġv", "cat", "(", "f", "_", "other", ",", "Ġf", "_", "r", "ho", ")", "Ġend"], "docstring": "Calculate 1D flux for a single point", "docstring_tokens": ["Cal", "cul", "ate", "Ġ1", "D", "Ġflux", "Ġfor", "Ġa", "Ġsingle", "Ġpoint"], "partition": "valid"}
{"path": "GitHub-Crawler-Julia/BlackBoxOptim.jl-master/spikes/auc_bandit_adaptive_selection.jl", "language": "julia", "code": "function remove_item(a::AucBanditSelector, item)\nfor i in 1:length(a.items)\nif a.items[i] == item\nremove_item_with_index(a, i)\nreturn i\nend\nend\nend", "code_tokens": ["function", "Ġremove", "_", "item", "(", "a", "::", "A", "uc", "Band", "it", "Select", "or", ",", "Ġitem", ")", "Ġfor", "Ġi", "Ġin", "Ġ1", ":", "length", "(", "a", ".", "items", ")", "Ġif", "Ġa", ".", "items", "[", "i", "]", "Ġ==", "Ġitem", "Ġremove", "_", "item", "_", "with", "_", "index", "(", "a", ",", "Ġi", ")", "Ġreturn", "Ġi", "Ġend", "Ġend", "Ġend"], "docstring": "Remove an item.", "docstring_tokens": ["Remove", "Ġan", "Ġitem", "."], "partition": "valid"}
{"path": "GitHub-Crawler-Julia/JumpProcesses.jl-master/src/aggregators/rssa.jl", "language": "julia", "code": "function generate_jumps!(p::RSSAJumpAggregation, integrator, u, params, t)\nsum_rate = p.sum_rate\nif nomorejumps!(p, sum_rate)\nreturn nothing\nend\n@unpack ma_jumps, rates, cur_rate_high, cur_rate_low, rng = p\nnum_majumps = get_num_majumps(ma_jumps)\nrerl = zero(sum_rate)\n\nr = rand(rng) * sum_rate\njidx = linear_search(cur_rate_high, r)\nif iszero(jidx)\np.next_jump_time = Inf\nreturn nothing\nend\nrerl += randexp(rng)\n@inbounds while rejectrx(ma_jumps, num_majumps, rates, cur_rate_high,\ncur_rate_low, rng, u, jidx, params, t)\nr = rand(rng) * sum_rate\njidx = linear_search(cur_rate_high, r)\nrerl += randexp(rng)\nend\np.next_jump = jidx\n\np.next_jump_time = t + rerl / sum_rate\nnothing\nend", "code_tokens": ["function", "Ġgenerate", "_", "j", "umps", "!", "(", "p", "::", "RS", "SA", "Jump", "Agg", "regation", ",", "Ġinteg", "rator", ",", "Ġu", ",", "Ġparams", ",", "Ġt", ")", "Ġsum", "_", "rate", "Ġ=", "Ġp", ".", "sum", "_", "rate", "Ġif", "Ġnom", "ore", "j", "umps", "!", "(", "p", ",", "Ġsum", "_", "rate", ")", "Ġreturn", "Ġnothing", "Ġend", "Ġ@", "un", "pack", "Ġma", "_", "j", "umps", ",", "Ġrates", ",", "Ġcur", "_", "rate", "_", "high", ",", "Ġcur", "_", "rate", "_", "low", ",", "Ġr", "ng", "Ġ=", "Ġp", "Ġnum", "_", "m", "aj", "umps", "Ġ=", "Ġget", "_", "num", "_", "m", "aj", "umps", "(", "ma", "_", "j", "umps", ")", "Ġre", "rl", "Ġ=", "Ġzero", "(", "sum", "_", "rate", ")", "Ġr", "Ġ=", "Ġrand", "(", "r", "ng", ")", "Ġ*", "Ġsum", "_", "rate", "Ġj", "id", "x", "Ġ=", "Ġlinear", "_", "search", "(", "cur", "_", "rate", "_", "high", ",", "Ġr", ")", "Ġif", "Ġis", "zero", "(", "j", "id", "x", ")", "Ġp", ".", "next", "_", "jump", "_", "time", "Ġ=", "ĠInf", "Ġreturn", "Ġnothing", "Ġend", "Ġre", "rl", "Ġ+=", "Ġrand", "exp", "(", "r", "ng", ")", "Ġ@", "in", "b", "ounds", "Ġwhile", "Ġreject", "rx", "(", "ma", "_", "j", "umps", ",", "Ġnum", "_", "m", "aj", "umps", ",", "Ġrates", ",", "Ġcur", "_", "rate", "_", "high", ",", "Ġcur", "_", "rate", "_", "low", ",", "Ġr", "ng", ",", "Ġu", ",", "Ġj", "id", "x", ",", "Ġparams", ",", "Ġt", ")", "Ġr", "Ġ=", "Ġrand", "(", "r", "ng", ")", "Ġ*", "Ġsum", "_", "rate", "Ġj", "id", "x", "Ġ=", "Ġlinear", "_", "search", "(", "cur", "_", "rate", "_", "high", ",", "Ġr", ")", "Ġre", "rl", "Ġ+=", "Ġrand", "exp", "(", "r", "ng", ")", "Ġend", "Ġp", ".", "next", "_", "jump", "Ġ=", "Ġj", "id", "x", "Ġp", ".", "next", "_", "jump", "_", "time", "Ġ=", "Ġt", "Ġ+", "Ġre", "rl", "Ġ/", "Ġsum", "_", "rate", "Ġnothing", "Ġend"], "docstring": "calculate the next jump / jump time", "docstring_tokens": ["cal", "cul", "ate", "Ġthe", "Ġnext", "Ġjump", "Ġ/", "Ġjump", "Ġtime"], "partition": "valid"}
{"path": "GitHub-Crawler-Julia/Nemo.jl-master/src/flint/fq_nmod_mpoly.jl", "language": "julia", "code": "function exponent_vectors_fmpz(a::fq_nmod_mpoly)\nreturn (exponent_vector_fmpz(a, i) for i in 1:length(a))\nend", "code_tokens": ["function", "Ġexponent", "_", "ve", "ctors", "_", "f", "mp", "z", "(", "a", "::", "f", "q", "_", "n", "mod", "_", "mp", "oly", ")", "Ġreturn", "Ġ(", "exp", "onent", "_", "vector", "_", "f", "mp", "z", "(", "a", ",", "Ġi", ")", "Ġfor", "Ġi", "Ġin", "Ġ1", ":", "length", "(", "a", "))", "Ġend"], "docstring": "Return a generator for exponent vectors of $a$", "docstring_tokens": ["Return", "Ġa", "Ġgenerator", "Ġfor", "Ġexponent", "Ġvectors", "Ġof", "Ġ$", "a", "$"], "partition": "valid"}
{"path": "GitHub-Crawler-Julia/Nemo.jl-master/src/flint/fq_nmod_mpoly.jl", "language": "julia", "code": "function degree(a::fq_nmod_mpoly, i::Int)\nn = nvars(parent(a))\n!(1 <= i <= n) && error(\"Index must be between 1 and $n\")\nd = ccall((:fq_nmod_mpoly_degree_si, libflint), Int,\n(Ref{fq_nmod_mpoly}, Int, Ref{FqNmodMPolyRing}),\na, i - 1, a.parent)\nreturn d\nend", "code_tokens": ["function", "Ġdegree", "(", "a", "::", "f", "q", "_", "n", "mod", "_", "mp", "oly", ",", "Ġi", "::", "Int", ")", "Ġn", "Ġ=", "Ġn", "v", "ars", "(", "parent", "(", "a", "))", "Ġ!", "(", "1", "Ġ<=", "Ġi", "Ġ<=", "Ġn", ")", "Ġ&&", "Ġerror", "(\"", "Index", "Ġmust", "Ġbe", "Ġbetween", "Ġ1", "Ġand", "Ġ$", "n", "\")", "Ġd", "Ġ=", "Ġc", "call", "((", ":", "f", "q", "_", "n", "mod", "_", "mp", "oly", "_", "degree", "_", "si", ",", "Ġlib", "fl", "int", "),", "ĠInt", ",", "Ġ(", "Ref", "{", "f", "q", "_", "n", "mod", "_", "mp", "oly", "},", "ĠInt", ",", "ĠRef", "{", "F", "q", "N", "mod", "MP", "oly", "Ring", "}", "),", "Ġa", ",", "Ġi", "Ġ-", "Ġ1", ",", "Ġa", ".", "parent", ")", "Ġreturn", "Ġd", "Ġend"], "docstring": "Degree in the i-th variable as an Int", "docstring_tokens": ["D", "eg", "ree", "Ġin", "Ġthe", "Ġit", "h", "Ġvariable", "Ġas", "Ġan", "ĠInt"], "partition": "valid"}
{"path": "GitHub-Crawler-Julia/CFD_Julia-master/18_NS2D_Lid_Driven_Cavity/lid_driven_cavity.jl", "language": "julia", "code": "function numerical(nx,ny,nt,dx,dy,dt,re,wn,sn,rms)\n\n\nfor k = 1:nt\n\nfor i = 1:nx+1 for j = 1:ny+1\nsp[i,j] = sn[i,j]\nend end\n\nrhs(nx,ny,dx,dy,re,wn,sn,r)\n\nfor i = 2:nx for j = 2:ny\nwt[i,j] = wn[i,j] + dt*r[i,j]\nend end\nbc2(nx,ny,dx,dy,wt,sn)\n\nsn[2:nx,2:ny] = fps_sine(nx,ny,dx,dy,-wt)\n\nrhs(nx,ny,dx,dy,re,wt,sn,r)\n\nfor i = 2:nx for j = 2:ny\nwt[i,j] = 0.75*wn[i,j] + 0.25*wt[i,j] + 0.25*dt*r[i,j]\nend end\nbc2(nx,ny,dx,dy,wt,sn)\n\nsn[2:nx,2:ny] = fps_sine(nx,ny,dx,dy,-wt)\n\nrhs(nx,ny,dx,dy,re,wt,sn,r)\n\nfor i = 2:nx for j = 2:ny\nwn[i,j] = (1.0/3.0)*wn[i,j] + (2.0/3.0)*wt[i,j] + (2.0/3.0)*dt*r[i,j]\nend end\nbc2(nx,ny,dx,dy,wn,sn)\n\nsn[2:nx,2:ny] = fps_sine(nx,ny,dx,dy,-wn)\n\nrms[k] = 0.0\nfor i = 1:nx+1 for j = 1:ny+1\nrms[k] = rms[k] + (sn[i,j] - sp[i,j])^2\nend end\n\nrms[k] = sqrt(rms[k]/((nx+1)*(ny+1)))\nprintln(k, \" \", rms[k])\n\nend\nend", "code_tokens": ["function", "Ġnumerical", "(", "n", "x", ",", "ny", ",", "nt", ",", "dx", ",", "dy", ",", "dt", ",", "re", ",", "wn", ",", "sn", ",", "r", "ms", ")", "Ġfor", "Ġk", "Ġ=", "Ġ1", ":", "nt", "Ġfor", "Ġi", "Ġ=", "Ġ1", ":", "n", "x", "+", "1", "Ġfor", "Ġj", "Ġ=", "Ġ1", ":", "ny", "+", "1", "Ġsp", "[", "i", ",", "j", "]", "Ġ=", "Ġsn", "[", "i", ",", "j", "]", "Ġend", "Ġend", "Ġrh", "s", "(", "n", "x", ",", "ny", ",", "dx", ",", "dy", ",", "re", ",", "wn", ",", "sn", ",", "r", ")", "Ġfor", "Ġi", "Ġ=", "Ġ2", ":", "n", "x", "Ġfor", "Ġj", "Ġ=", "Ġ2", ":", "ny", "Ġw", "t", "[", "i", ",", "j", "]", "Ġ=", "Ġw", "n", "[", "i", ",", "j", "]", "Ġ+", "Ġd", "t", "*", "r", "[", "i", ",", "j", "]", "Ġend", "Ġend", "Ġbc", "2", "(", "n", "x", ",", "ny", ",", "dx", ",", "dy", ",", "wt", ",", "sn", ")", "Ġsn", "[", "2", ":", "n", "x", ",", "2", ":", "ny", "]", "Ġ=", "Ġfps", "_", "s", "ine", "(", "n", "x", ",", "ny", ",", "dx", ",", "dy", ",-", "wt", ")", "Ġrh", "s", "(", "n", "x", ",", "ny", ",", "dx", ",", "dy", ",", "re", ",", "wt", ",", "sn", ",", "r", ")", "Ġfor", "Ġi", "Ġ=", "Ġ2", ":", "n", "x", "Ġfor", "Ġj", "Ġ=", "Ġ2", ":", "ny", "Ġw", "t", "[", "i", ",", "j", "]", "Ġ=", "Ġ0", ".", "75", "*", "wn", "[", "i", ",", "j", "]", "Ġ+", "Ġ0", ".", "25", "*", "wt", "[", "i", ",", "j", "]", "Ġ+", "Ġ0", ".", "25", "*", "dt", "*", "r", "[", "i", ",", "j", "]", "Ġend", "Ġend", "Ġbc", "2", "(", "n", "x", ",", "ny", ",", "dx", ",", "dy", ",", "wt", ",", "sn", ")", "Ġsn", "[", "2", ":", "n", "x", ",", "2", ":", "ny", "]", "Ġ=", "Ġfps", "_", "s", "ine", "(", "n", "x", ",", "ny", ",", "dx", ",", "dy", ",-", "wt", ")", "Ġrh", "s", "(", "n", "x", ",", "ny", ",", "dx", ",", "dy", ",", "re", ",", "wt", ",", "sn", ",", "r", ")", "Ġfor", "Ġi", "Ġ=", "Ġ2", ":", "n", "x", "Ġfor", "Ġj", "Ġ=", "Ġ2", ":", "ny", "Ġw", "n", "[", "i", ",", "j", "]", "Ġ=", "Ġ(", "1", ".", "0", "/", "3", ".", "0", ")*", "wn", "[", "i", ",", "j", "]", "Ġ+", "Ġ(", "2", ".", "0", "/", "3", ".", "0", ")*", "wt", "[", "i", ",", "j", "]", "Ġ+", "Ġ(", "2", ".", "0", "/", "3", ".", "0", ")*", "dt", "*", "r", "[", "i", ",", "j", "]", "Ġend", "Ġend", "Ġbc", "2", "(", "n", "x", ",", "ny", ",", "dx", ",", "dy", ",", "wn", ",", "sn", ")", "Ġsn", "[", "2", ":", "n", "x", ",", "2", ":", "ny", "]", "Ġ=", "Ġfps", "_", "s", "ine", "(", "n", "x", ",", "ny", ",", "dx", ",", "dy", ",-", "wn", ")", "Ġr", "ms", "[", "k", "]", "Ġ=", "Ġ0", ".", "0", "Ġfor", "Ġi", "Ġ=", "Ġ1", ":", "n", "x", "+", "1", "Ġfor", "Ġj", "Ġ=", "Ġ1", ":", "ny", "+", "1", "Ġr", "ms", "[", "k", "]", "Ġ=", "Ġr", "ms", "[", "k", "]", "Ġ+", "Ġ(", "sn", "[", "i", ",", "j", "]", "Ġ-", "Ġsp", "[", "i", ",", "j", "])", "^", "2", "Ġend", "Ġend", "Ġr", "ms", "[", "k", "]", "Ġ=", "Ġsq", "rt", "(", "r", "ms", "[", "k", "]", "/", "((", "n", "x", "+", "1", ")*", "(", "ny", "+", "1", ")))", "Ġprintln", "(", "k", ",", "Ġ\"", "Ġ\",", "Ġr", "ms", "[", "k", "])", "Ġend", "Ġend"], "docstring": "Compute numerical solution", "docstring_tokens": ["Comp", "ute", "Ġnumerical", "Ġsolution"], "partition": "valid"}
{"path": "GitHub-Crawler-Julia/Oscar.jl-master/src/Rings/mpoly-localizations.jl", "language": "julia", "code": "function rand(S::MPolyComplementOfKPointIdeal, v1::UnitRange{Int}, v2::UnitRange{Int}, v3::UnitRange{Int})\nf = rand(ambient_ring(S), v1, v2, v3)\nif !(f in S)\nreturn rand(S, v1, v2, v3)\nend\nreturn f\nend", "code_tokens": ["function", "Ġrand", "(", "S", "::", "MP", "oly", "Com", "plement", "Of", "K", "Point", "Id", "eal", ",", "Ġv", "1", "::", "Unit", "Range", "{", "Int", "},", "Ġv", "2", "::", "Unit", "Range", "{", "Int", "},", "Ġv", "3", "::", "Unit", "Range", "{", "Int", "})", "Ġf", "Ġ=", "Ġrand", "(", "amb", "ient", "_", "ring", "(", "S", "),", "Ġv", "1", ",", "Ġv", "2", ",", "Ġv", "3", ")", "Ġif", "Ġ!", "(", "f", "Ġin", "ĠS", ")", "Ġreturn", "Ġrand", "(", "S", ",", "Ġv", "1", ",", "Ġv", "2", ",", "Ġv", "3", ")", "Ġend", "Ġreturn", "Ġf", "Ġend"], "docstring": "generation of random elements", "docstring_tokens": ["generation", "Ġof", "Ġrandom", "Ġelements"], "partition": "valid"}